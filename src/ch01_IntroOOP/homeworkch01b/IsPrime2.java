package ch01_IntroOOP.homeworkch01b;
/*Для оптимизации проверки на простоту числа без использования Math.sqrt(), можно использовать тот факт,
 что если у числа есть делитель больше 1 и меньше самого числа, то один из делителей обязательно будет
  не больше квадратного корня из числа. Вместо вычисления квадратного корня можно проверить делители до
   половины числа, что также будет достаточно эффективно для наших целей.

Вот обновлённая версия программы:*/
public class IsPrime2 {
    public static boolean isPrime2(int number) {
        if (number <= 1) {
            return false;
        }
        if (number == 2) {
            return true; // 2 — единственное четное простое число
        }
        if (number % 2 == 0) {
            return false; // четные числа больше 2 не являются простыми
        }
        for (int i = 3; i <= number / 2; i += 2) {
            if (number % i == 0) {
                return false;
            }
        }
        return true;
    }
}
/*Улучшенная проверка на простоту:
Для чисел, меньше или равных 1, возвращаем false (они не являются простыми).
Число 2 обрабатываем отдельно как единственное четное простое число.
Если число четное и больше 2, оно не является простым.
Проверяем только нечетные делители от 3 до number / 2. Это уменьшает количество итераций в два раза по сравнению
с полным перебором всех чисел до number / 2.
Этот подход более эффективен, чем полный перебор всех чисел до самого числа, и не требует вычисления квадратного корня,
 что может быть полезно в условиях, где производительность важна.*/